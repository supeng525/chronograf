/**
 * @license
 * Copyright 2011 Dan Vanderkam (danvdk@gmail.com)
 * MIT-licensed (http://opensource.org/licenses/MIT)
 */

/**
 * @fileoverview Based on PlotKitLayout, but modified to meet the needs of
 * dygraphs.
 */

/*global Dygraph:false */
"use strict";

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

var _dygraphUtils = require('./dygraph-utils');

var utils = _interopRequireWildcard(_dygraphUtils);

/**
 * Creates a new DygraphLayout object.
 *
 * This class contains all the data to be charted.
 * It uses data coordinates, but also records the chart range (in data
 * coordinates) and hence is able to calculate percentage positions ('In this
 * view, Point A lies 25% down the x-axis.')
 *
 * Two things that it does not do are:
 * 1. Record pixel coordinates for anything.
 * 2. (oddly) determine anything about the layout of chart elements.
 *
 * The naming is a vestige of Dygraph's original PlotKit roots.
 *
 * @constructor
 */
var DygraphLayout = function DygraphLayout(dygraph) {
  this.dygraph_ = dygraph;
  /**
   * Array of points for each series.
   *
   * [series index][row index in series] = |Point| structure,
   * where series index refers to visible series only, and the
   * point index is for the reduced set of points for the current
   * zoom region (including one point just outside the window).
   * All points in the same row index share the same X value.
   *
   * @type {Array.<Array.<Dygraph.PointType>>}
   */
  this.points = [];
  this.setNames = [];
  this.annotations = [];
  this.yAxes_ = null;

  // TODO(danvk): it's odd that xTicks_ and yTicks_ are inputs, but xticks and
  // yticks are outputs. Clean this up.
  this.xTicks_ = null;
  this.yTicks_ = null;
};

/**
 * Add points for a single series.
 *
 * @param {string} setname Name of the series.
 * @param {Array.<Dygraph.PointType>} set_xy Points for the series.
 */
DygraphLayout.prototype.addDataset = function (setname, set_xy) {
  this.points.push(set_xy);
  this.setNames.push(setname);
};

/**
 * Returns the box which the chart should be drawn in. This is the canvas's
 * box, less space needed for the axis and chart labels.
 *
 * @return {{x: number, y: number, w: number, h: number}}
 */
DygraphLayout.prototype.getPlotArea = function () {
  return this.area_;
};

// Compute the box which the chart should be drawn in. This is the canvas's
// box, less space needed for axis, chart labels, and other plug-ins.
// NOTE: This should only be called by Dygraph.predraw_().
DygraphLayout.prototype.computePlotArea = function () {
  var area = {
    // TODO(danvk): per-axis setting.
    x: 0,
    y: 0
  };

  area.w = this.dygraph_.width_ - area.x - this.dygraph_.getOption('rightGap');
  area.h = this.dygraph_.height_;

  // Let plugins reserve space.
  var e = {
    chart_div: this.dygraph_.graphDiv,
    reserveSpaceLeft: function reserveSpaceLeft(px) {
      var r = {
        x: area.x,
        y: area.y,
        w: px,
        h: area.h
      };
      area.x += px;
      area.w -= px;
      return r;
    },
    reserveSpaceRight: function reserveSpaceRight(px) {
      var r = {
        x: area.x + area.w - px,
        y: area.y,
        w: px,
        h: area.h
      };
      area.w -= px;
      return r;
    },
    reserveSpaceTop: function reserveSpaceTop(px) {
      var r = {
        x: area.x,
        y: area.y,
        w: area.w,
        h: px
      };
      area.y += px;
      area.h -= px;
      return r;
    },
    reserveSpaceBottom: function reserveSpaceBottom(px) {
      var r = {
        x: area.x,
        y: area.y + area.h - px,
        w: area.w,
        h: px
      };
      area.h -= px;
      return r;
    },
    chartRect: function chartRect() {
      return { x: area.x, y: area.y, w: area.w, h: area.h };
    }
  };
  this.dygraph_.cascadeEvents_('layout', e);

  this.area_ = area;
};

DygraphLayout.prototype.setAnnotations = function (ann) {
  // The Dygraph object's annotations aren't parsed. We parse them here and
  // save a copy. If there is no parser, then the user must be using raw format.
  this.annotations = [];
  var parse = this.dygraph_.getOption('xValueParser') || function (x) {
    return x;
  };
  for (var i = 0; i < ann.length; i++) {
    var a = {};
    if (!ann[i].xval && ann[i].x === undefined) {
      console.error("Annotations must have an 'x' property");
      return;
    }
    if (ann[i].icon && !(ann[i].hasOwnProperty('width') && ann[i].hasOwnProperty('height'))) {
      console.error("Must set width and height when setting " + "annotation.icon property");
      return;
    }
    utils.update(a, ann[i]);
    if (!a.xval) a.xval = parse(a.x);
    this.annotations.push(a);
  }
};

DygraphLayout.prototype.setXTicks = function (xTicks) {
  this.xTicks_ = xTicks;
};

// TODO(danvk): add this to the Dygraph object's API or move it into Layout.
DygraphLayout.prototype.setYAxes = function (yAxes) {
  this.yAxes_ = yAxes;
};

DygraphLayout.prototype.evaluate = function () {
  this._xAxis = {};
  this._evaluateLimits();
  this._evaluateLineCharts();
  this._evaluateLineTicks();
  this._evaluateAnnotations();
};

//  sup test  计算x轴缩放比例
DygraphLayout.prototype._evaluateLimits = function () {
  var xlimits = this.dygraph_.xAxisRange();
  this._xAxis.minval = xlimits[0];
  this._xAxis.maxval = xlimits[1];
  // 去掉中午休市数据
  var tradingHours1 = this.dygraph_.xTradingHours1();
  var tradingHours2 = this.dygraph_.xTradingHours2();
  var tradingHours3 = this.dygraph_.xTradingHours3();
  // var xrange = xlimits[1] - xlimits[0] 
  // var breaktime = 0;
  var day = 0;
  // var stoptime = 0;
  // 中午休市后开始时间
  var dataScale = this.dygraph_.getScale();
  this._xAxis.dayAll = day;
  this._xAxis.tradingHours1 = tradingHours1;
  this._xAxis.tradingHours2 = tradingHours2;
  this._xAxis.tradingHours3 = tradingHours3;
  this._xAxis.breaktime = dataScale['breaktime']; //中午休市时间
  this._xAxis.breaktimeNight = dataScale['breaktimeNight']; //下午盘到夜盘间隔时间
  this._xAxis.stoptime = dataScale['stoptime'];// 闭市到第二日交易时间间隔
  this._xAxis.type = dataScale['type'];
  this._xAxis.scale = dataScale['scale'] !== 0 ? 1 / dataScale['scale'] : 1.0;
  // this._xAxis.breaktime = breaktime; //中午休市时间
  // this._xAxis.stoptime = stoptime;// 闭市到第二日交易时间间隔
  // this._xAxis.type = type;
  // this._xAxis.scale = xrange !== 0 ? 1 / xrange : 1.0;

  if (this.dygraph_.getOptionForAxis("logscale", 'x')) {
    this._xAxis.xlogrange = utils.log10(this._xAxis.maxval) - utils.log10(this._xAxis.minval);
    this._xAxis.xlogscale = this._xAxis.xlogrange !== 0 ? 1.0 / this._xAxis.xlogrange : 1.0;
  }
  for (var i = 0; i < this.yAxes_.length; i++) {
    var axis = this.yAxes_[i];
    axis.minyval = axis.computedValueRange[0];
    axis.maxyval = axis.computedValueRange[1];
    axis.yrange = axis.maxyval - axis.minyval;
    axis.yscale = axis.yrange !== 0 ? 1.0 / axis.yrange : 1.0;

    if (this.dygraph_.getOption("logscale")) {
      axis.ylogrange = utils.log10(axis.maxyval) - utils.log10(axis.minyval);
      axis.ylogscale = axis.ylogrange !== 0 ? 1.0 / axis.ylogrange : 1.0;
      if (!isFinite(axis.ylogrange) || isNaN(axis.ylogrange)) {
        console.error('axis ' + i + ' of graph at ' + axis.g + ' can\'t be displayed in log scale for range [' + axis.minyval + ' - ' + axis.maxyval + ']');
      }
    }
  }
};

// sup test  计算x轴坐标的位置
DygraphLayout.calcXNormal_ = function (value, xAxis, logscale) {
  if (logscale) {
    return (utils.log10(value) - utils.log10(xAxis.minval)) * xAxis.xlogscale;
  } else {
    // var transformX = dygraph_.transformX(value);
    var temp;
    var timeVal = new Date(value).getHours()*60 + new Date(value).getMinutes();
    var day = Math.floor((new Date(new Date(value).toLocaleDateString()).getTime() 
              - new Date(new Date(xAxis.minval).toLocaleDateString()).getTime())/24/60/60/1000);
    var breakDay = day;//需要减去中午休市时间的词数
    var breakNightDay = day;// 需要减去下午和夜盘休市时间的次数数
    var stopDay = day
    switch(xAxis.type){
      case 0:
          temp = value;
          break;
      case 1:
      case 2:
        // > 13:00
        if(timeVal >= xAxis.tradingHours2[2])
        {
          breakDay = day + 1
        }
        temp = value - xAxis.breaktime*(breakDay) - xAxis.stoptime*day 
        break;
      case 3:
      case 4:
        // < 11:30
        if(timeVal <= xAxis.tradingHours1[3])
        {
          breakDay = day - 1
        }
        temp = value - xAxis.breaktime*(breakDay) - xAxis.stoptime*day 
        break;
      //   10 <= case <= 18  非隔夜
      // 09:30 tradingHours1[2] 11:30 tradingHours1[3]
      // 13:00 tradingHours2[2] 15:00 tradingHours2[3]
      // 21:00 tradingHours3[2] 23:00 tradingHours3[3]
      // 10 场景1：min<11:30 &&  max<11:30 day
      // 11 场景2：min<11:30 &&  13<max<15 break:day+1 breakNight:day
      // 12 场景3：min<11:30 &&  21<max<23 break:day+1 breakNight:day+1
      // 13 场景4：13<min<15 &&  09:30<max<11:30 break:day-1 breakNight:day
      // 14 场景5：13<min<15 &&  13<max<15 break:day breakNight:day
      // 15 场景6：13<min<15 &&  21<max<23 break:day-1 breakNight:day
      // 16 场景7：21<min<23 &&  09:30<max<11:30 break:day-1 breakNight:day-1
      // 17 场景8：21<min<23 &&  13<max<15 break:day breakNight:day-1
      // 18 场景9：21<min<23 &&  21<max<23 break:day breakNight:day
      case 10: //非隔夜 min<11 max<11
      case 11: //非隔夜 
      case 12: //非隔夜 min<11:30 &&  21<max<23 break:day+1 breakNight:day+1
        // 13 <= timeVal 
        if(timeVal >= xAxis.tradingHours2[2]) 
        {
            breakDay = day + 1;
        }
        // > 21点
        if(timeVal >= xAxis.tradingHours3.startMinutes)
        {
          breakNightDay = day + 1;
        }
        temp = value - xAxis.breaktime*breakDay -  xAxis.breaktimeNight*breakNightDay - xAxis.stoptime*day;
        break;
      case 13: //非隔夜 
      case 14: //非隔夜 
      case 15: //非隔夜 13<min<15 &&  21<max<23 break:day-1 breakNight:day
        // 11:30 >= timeVal 
        if(timeVal <= xAxis.tradingHours1[3]) 
        {
            breakDay = day - 1;
        }
        // > 21点
        if(timeVal >= xAxis.tradingHours3.startMinutes)
        {
          breakNightDay = day + 1;
        }
        temp = value - xAxis.breaktime*breakDay -  xAxis.breaktimeNight*breakNightDay - xAxis.stoptime*day;
        break;
      case 16: //非隔夜 
      case 17: //非隔夜 
      case 18: //非隔夜 21<min<23 &&  21<max<23 break:day breakNight:day
        // 11:30 >= timeVal 
        if(timeVal <= xAxis.tradingHours1[3]) 
        {
            breakDay = day - 1;
        }
        // < 15点
        if(timeVal <= xAxis.tradingHours2[3])
        {
          breakNightDay = day - 1;
        }
        temp = value - xAxis.breaktime*breakDay -  xAxis.breaktimeNight*breakNightDay - xAxis.stoptime*day;
        break;
      // 09:30 tradingHours1[2] 11:30 tradingHours1[3]
    // 13:00 tradingHours2[2] 15:00 tradingHours2[3]
    // 21:00 tradingHours3[2] 02:00 tradingHours3[3]
    // 20 场景1：min<11:30 &&  max<11:30 day day
    // 21 场景2：min<11:30 &&  13<max<15 break:day+1 breakNight:day
    // 22 场景3：min<11:30 &&  21<max||max<02 break:day+1 breakNight:day+1
    // 23 场景4：13<min<15 &&  09:30<max<11:30 break:day-1 breakNight:day
    // 24场景5：13<min<15 &&  13<max<15 break:day breakNight:day
    // 25场景6：13<min<15 &&  21<max||max<02 break:day-1 breakNight:day
    // 26场景7：21<min||min<02 &&  09:30<max<11:30 break:day-1 breakNight:day-1
    // 27场景8：21<min||min<02 &&  13<max<15 break:day breakNight:day-1
    // 28场景9：21<min||min<02 &&  21<max||max<02 break:day breakNight:day
    case 20: //隔夜 
    case 21: //隔夜 
    case 22: //隔夜 min<11:30 &&  21<max||max<02
       //  timeVal >= 13
        if(timeVal >= xAxis.tradingHours2[2]) 
        {
            breakDay = day + 1;
        }
        // > 21点
        if(timeVal >= xAxis.tradingHours3.startMinutes)
        {
          breakNightDay = day + 1;
        }
        if(timeVal <= xAxis.tradingHours3.endMinutes)
        {
          stopDay = day - 1;
        }
        temp = value - xAxis.breaktime*breakDay -  xAxis.breaktimeNight*breakNightDay - xAxis.stoptime*stopDay;
        break;
      case 23: //隔夜 
      case 24: //隔夜 
      case 25: //隔夜 13<min<15 &&  21<max||max<02 break:day-1 breakNight:day
        // 11:30 >= timeVal 
        if(timeVal <= xAxis.tradingHours1[3]) 
        {
            breakDay = day - 1;
        }
        // > 21点
        if(timeVal >= xAxis.tradingHours3.startMinutes)
        {
          breakNightDay = day + 1;
        }
        // < 02
        if(timeVal <= xAxis.tradingHours3.endMinutes)
        {
          stopDay = day - 1;
        }
        temp = value - xAxis.breaktime*breakDay -  xAxis.breaktimeNight*breakNightDay - xAxis.stoptime*stopDay;
        break;
      case 26: //隔夜 
      case 27: //隔夜 
      case 28: //隔夜 21<min||min<02 &&  21<max||max<02 break:day breakNight:day
        // 11:30 >= timeVal 
        if(timeVal <= xAxis.tradingHours1[3]) 
        {
            breakDay = day - 1;
        }
        // < 15点
        if(timeVal <= xAxis.tradingHours2[3])
        {
          breakNightDay = day - 1;
        }
        // < 02
        if(timeVal <= xAxis.tradingHours3.endMinutes)
        {
          stopDay = day - 1;
        }
        // 隔夜夜盘 && 开始时间为凌晨
        //console.log(new Date(xAxis.minval).getHours()*60 + new Date(xAxis.minval).getMinutes() ,xAxis.tradingHours3.endMinutes)
        if(new Date(xAxis.minval).getHours()*60 + new Date(xAxis.minval).getMinutes() <= xAxis.tradingHours3.endMinutes)
        {
          breakDay = breakDay + 1;
          breakNightDay = breakNightDay + 1;
          stopDay =stopDay + 1;
        }
        temp = value - xAxis.breaktime*breakDay -  xAxis.breaktimeNight*breakNightDay - xAxis.stoptime*stopDay;
        break;
      default:
          temp = value;
          break;
    }
    // console.log('sup3',xAxis.type,xAxis.tradingHours3,'s',xAxis.tradingHours3.startMinutes,(temp - xAxis.minval)* xAxis.scale)
    return (temp - xAxis.minval) * xAxis.scale;
    // case 1://tradingHours1和2非空 day+1
      //   // 大于中午收盘后时间
      //   breakDay = day + 1;
      //   if(timeVal >= xAxis.tradingHours2[2])
      //   { 
      //       temp = value - xAxis.breaktime*(breakDay) - xAxis.stoptime*day 
      //   }else if(timeVal<=xAxis.tradingHours1[3]){//介于tradingHours1 开始和结束之间的时间
      //       temp = value - (xAxis.breaktime*day + xAxis.stoptime*day)
      //       //console.log('sup1',timeVal,xAxis.breaktime)
      //   }else{
      //       temp = value
      //   }
      //   // console.log('sup',vale - temp,day)
      //   break;
      // case 2://tradingHours1和2非空 day-1
      //     breakDay = day - 1;
      //     if(timeVal >= xAxis.tradingHours2[2])
      //     { 
      //         temp = value - xAxis.breaktime*(breakDay+1) - xAxis.stoptime*day 
      //     }else if(timeVal<=xAxis.tradingHours1[3]){//介于tradingHours1 开始和结束之间的时间
      //         temp = value - (xAxis.breaktime*breakDay + xAxis.stoptime*day)
      //     //console.log('sup1',timeVal,xAxis.tradingHours1[3])
      //     }else{
      //         temp = value
      //     }
      //     break;
      // case 3://tradingHours1和2非空 day不变
      //     if(timeVal >= xAxis.tradingHours2[2])
      //     { 
      //         temp = value - (xAxis.breaktime + xAxis.stoptime)*day 
      //     }else if(timeVal<=xAxis.tradingHours1[3]){//介于tradingHours1 开始和结束之间的时间
      //         temp = value - xAxis.breaktime*(day-1) - xAxis.stoptime*day
      //     // console.log('sup1',timeVal,xAxis.tradingHours1[3])
      //     }else{
      //         temp = value
      //     }
      //     break;
      // case 4://tradingHours1和2非空 day不变
      //     if(timeVal >= xAxis.tradingHours2[2])
      //     { 
      //         temp = value - xAxis.breaktime*(day+1) - xAxis.stoptime*day 
      //     }else if(timeVal<=xAxis.tradingHours1[3]){//介于tradingHours1 开始和结束之间的时间
      //         temp = value - (xAxis.breaktime + xAxis.stoptime)*(day)
      //     // console.log('sup1',timeVal,xAxis.tradingHours1[3])
      //     }else{
      //         temp = value
      //     }
      //     break;
    // console.log('sup1',temp,xAxis.minval,xAxis.scale,(temp - xAxis.minval) * xAxis.scale,xAxis.type)
    //return (value - xAxis.minval) * xAxis.scale;
  }
};

/**
 * @param {DygraphAxisType} axis
 * @param {number} value
 * @param {boolean} logscale
 * @return {number}
 */
DygraphLayout.calcYNormal_ = function (axis, value, logscale) {
  if (logscale) {
    var x = 1.0 - (utils.log10(value) - utils.log10(axis.minyval)) * axis.ylogscale;
    return isFinite(x) ? x : NaN; // shim for v8 issue; see pull request 276
  } else {
      return 1.0 - (value - axis.minyval) * axis.yscale;
    }
};

DygraphLayout.prototype._evaluateLineCharts = function () {
  var isStacked = this.dygraph_.getOption("stackedGraph");
  var isLogscaleForX = this.dygraph_.getOptionForAxis("logscale", 'x');

  for (var setIdx = 0; setIdx < this.points.length; setIdx++) {
    var points = this.points[setIdx];
    var setName = this.setNames[setIdx];
    var connectSeparated = this.dygraph_.getOption('connectSeparatedPoints', setName);
    var axis = this.dygraph_.axisPropertiesForSeries(setName);
    // TODO (konigsberg): use optionsForAxis instead.
    var logscale = this.dygraph_.attributes_.getForSeries("logscale", setName);

    for (var j = 0; j < points.length; j++) {
      var point = points[j];

      // Range from 0-1 where 0 represents left and 1 represents right.
      point.x = DygraphLayout.calcXNormal_(point.xval, this._xAxis, isLogscaleForX);
      // Range from 0-1 where 0 represents top and 1 represents bottom
      var yval = point.yval;
      if (isStacked) {
        point.y_stacked = DygraphLayout.calcYNormal_(axis, point.yval_stacked, logscale);
        if (yval !== null && !isNaN(yval)) {
          yval = point.yval_stacked;
        }
      }
      if (yval === null) {
        yval = NaN;
        if (!connectSeparated) {
          point.yval = NaN;
        }
      }
      point.y = DygraphLayout.calcYNormal_(axis, yval, logscale);
    }

    this.dygraph_.dataHandler_.onLineEvaluated(points, axis, logscale);
  }
};

DygraphLayout.prototype._evaluateLineTicks = function () {
  var i, tick, label, pos, v, has_tick;
  this.xticks = [];
  for (i = 0; i < this.xTicks_.length; i++) {
    tick = this.xTicks_[i];
    label = tick.label;
    has_tick = !('label_v' in tick);
    v = has_tick ? tick.v : tick.label_v;
    pos = this.dygraph_.toPercentXCoord(v);
    if (pos >= 0.0 && pos < 1.0) {
      this.xticks.push({ pos: pos, label: label, has_tick: has_tick });
    }
  }

  this.yticks = [];
  for (i = 0; i < this.yAxes_.length; i++) {
    var axis = this.yAxes_[i];
    for (var j = 0; j < axis.ticks.length; j++) {
      tick = axis.ticks[j];
      label = tick.label;
      has_tick = !('label_v' in tick);
      v = has_tick ? tick.v : tick.label_v;
      pos = this.dygraph_.toPercentYCoord(v, i);
      if (pos > 0.0 && pos <= 1.0) {
        this.yticks.push({ axis: i, pos: pos, label: label, has_tick: has_tick });
      }
    }
  }
};

DygraphLayout.prototype._evaluateAnnotations = function () {
  // Add the annotations to the point to which they belong.
  // Make a map from (setName, xval) to annotation for quick lookups.
  var i;
  var annotations = {};
  for (i = 0; i < this.annotations.length; i++) {
    var a = this.annotations[i];
    annotations[a.xval + "," + a.series] = a;
  }

  this.annotated_points = [];

  // Exit the function early if there are no annotations.
  if (!this.annotations || !this.annotations.length) {
    return;
  }

  // TODO(antrob): loop through annotations not points.
  for (var setIdx = 0; setIdx < this.points.length; setIdx++) {
    var points = this.points[setIdx];
    for (i = 0; i < points.length; i++) {
      var p = points[i];
      var k = p.xval + "," + p.name;
      if (k in annotations) {
        p.annotation = annotations[k];
        this.annotated_points.push(p);
      }
    }
  }
};

/**
 * Convenience function to remove all the data sets from a graph
 */
DygraphLayout.prototype.removeAllDatasets = function () {
  delete this.points;
  delete this.setNames;
  delete this.setPointsLengths;
  delete this.setPointsOffsets;
  this.points = [];
  this.setNames = [];
  this.setPointsLengths = [];
  this.setPointsOffsets = [];
};

exports['default'] = DygraphLayout;
module.exports = exports['default'];