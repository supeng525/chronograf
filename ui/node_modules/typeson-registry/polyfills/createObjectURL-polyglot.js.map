{"version":3,"file":"createObjectURL-polyglot.js","sources":["createObjectURL.js"],"sourcesContent":["/* eslint-env node */\n// Imperfectly polyfill jsdom for testing `Blob`/`File`\n// Todo: These can be removed once `URL.createObjectURL` may\n//    be implemented in jsdom: https://github.com/jsdom/jsdom/issues/1721\n//    though local-xmlhttprequest may need to be adapted\n\n// These are not working well with Rollup as imports\nconst mod = typeof module !== 'undefined';\nconst uuid = mod && require('uuid/v4');\nconst whatwgURL = (mod && require('whatwg-url')) || {};\n// We also need to tweak `XMLHttpRequest` which our types\n//    rely on to obtain the Blob/File content\nconst utils = (mod && require('jsdom/lib/jsdom/living/generated/utils')) || {};\n\nconst {serializeURLOrigin, parseURL} = whatwgURL;\n\nconst blobURLs = {};\nconst createObjectURL = function (blob) {\n    // https://github.com/jsdom/jsdom/issues/1721#issuecomment-282465529\n    const blobURL = 'blob:' + serializeURLOrigin(parseURL(location.href)) + '/' + uuid();\n    blobURLs[blobURL] = blob;\n    return blobURL;\n};\n\nconst impl = utils.implSymbol;\nconst _xhropen = XMLHttpRequest.prototype.open;\nconst _xhrOverrideMimeType = XMLHttpRequest.prototype.overrideMimeType;\n// We only handle the case of binary, so no need to override `open`\n//   in all cases; but this only works if override is called first\nconst xmlHttpRequestOverrideMimeType = function ({polyfillDataURLs} = {}) {\n    return function (mimeType, ...args) {\n        if (mimeType === 'text/plain; charset=x-user-defined') {\n            this.open = function (method, url, async) {\n                if ((/^blob:/).test(url)) {\n                    const blob = blobURLs[url];\n                    const responseType = 'text/plain'; // blob.type;\n                    const encoded = blob[impl]._buffer.toString('binary'); // utf16le and base64 both convert lone surrogates\n                    // Not usable in jsdom which makes properties readonly,\n                    //   but local-xmlhttprequest can use (and jsdom can\n                    //   handle data URLs anyways)\n                    if (polyfillDataURLs) {\n                        this.status = 200;\n                        this.send = function () { };\n                        this.responseType = responseType || '';\n                        this.responseText = encoded || '';\n                        return;\n                    }\n                    url = 'data:' + responseType + ',' + encodeURIComponent(encoded);\n                }\n                return _xhropen.call(this, method, url, async);\n            };\n        }\n        return _xhrOverrideMimeType.call(this, mimeType, ...args);\n    };\n};\n\nexport {createObjectURL, xmlHttpRequestOverrideMimeType};\n"],"names":["mod","module","uuid","require","whatwgURL","utils","serializeURLOrigin","parseURL","blobURLs","impl","implSymbol","_xhropen","XMLHttpRequest","prototype","open","_xhrOverrideMimeType","overrideMimeType","createObjectURL","blob","blobURL","location","href","xmlHttpRequestOverrideMimeType","polyfillDataURLs","mimeType","method","url","async","test","encoded","_buffer","toString","status","send","responseType","responseText","encodeURIComponent","call","this","args"],"mappings":"4MAOA,IAAMA,EAAwB,oBAAXC,OACbC,EAAOF,GAAOG,QAAQ,WACtBC,EAAaJ,GAAOG,QAAQ,eAAkB,GAG9CE,EAASL,GAAOG,QAAQ,2CAA8C,GAErEG,EAAgCF,EAAhCE,mBAAoBC,EAAYH,EAAZG,SAErBC,EAAW,GAQXC,EAAOJ,EAAMK,WACbC,EAAWC,eAAeC,UAAUC,KACpCC,EAAuBH,eAAeC,UAAUG,mCAT9B,SAAlBC,gBAA4BC,OAExBC,EAAU,QAAUb,EAAmBC,EAASa,SAASC,OAAS,IAAMnB,WAC9EM,EAASW,GAAWD,EACbC,oCAQ4B,SAAjCG,qCAA4CC,0DAAoB,IAApBA,wBACvC,SAAUC,GACI,uCAAbA,SACKV,KAAO,SAAUW,EAAQC,EAAKC,MAC1B,SAAUC,KAAKF,GAAM,KAGhBG,EAFOrB,EAASkB,GAEDjB,GAAMqB,QAAQC,SAAS,aAIxCR,cACKS,OAAS,SACTC,KAAO,kBACPC,aARY,uBASZC,aAAeN,GAAW,IAGnCH,EAAM,mBAA+BU,mBAAmBP,UAErDlB,EAAS0B,KAAKC,KAAMb,EAAQC,EAAKC,gCAnBtBY,mCAAAA,2BAsBnBxB,EAAqBsB,WAArBtB,GAA0BuB,KAAMd,UAAae"}